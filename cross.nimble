# Package

version          = "0.1.0"
author           = "cross"
description      = "Cross-compilation with Nim and Zig"
license          = "MIT"
srcDir           = "src"
namedBin["main"] = "cross"

# Dependencies

requires "nim >= 2.2.4"

# Cross-compilation tasks

import os
import strutils
import json

proc buildWithZig(target: string, os_name: string, cpu_name: string, zig_target: string, extraFlags: string = "") =
  ## Cross-compile with Zig based on JSON generated by Nim compilation
  let
    nimcachePath = "c_" & target
    outputPath = "cross_" & target

  echo "🔨 Building for: ", target
  echo "📋 Nim: os=", os_name, ", cpu=", cpu_name
  echo "🎯 Zig: ", zig_target

  # Clean cache (required for macOS)
  if os_name == "macosx":
    echo "🧹 Cleaning cache..."
    exec("rm -rf " & nimcachePath)
  
  # Step 1: Generate C code with Nim (with optimization flags)
  var nimCmd = "nim c --compileOnly --nimcache:" & nimcachePath & 
               " --os:" & os_name & " --cpu:" & cpu_name &
               " -d:release --opt:size -d:strip"
  if extraFlags.len > 0:
    nimCmd.add(" " & extraFlags)
  nimCmd.add(" src/main.nim")
  echo "🚀 ", nimCmd
  exec(nimCmd)
  
  # Step 2: Read main.json
  let jsonPath = nimcachePath / "main.json"
  if not fileExists(jsonPath):
    quit("❌ main.json not found: " & jsonPath)
  
  let buildInfo = parseJson(readFile(jsonPath))
  
  # Step 3: Compile (.c -> .o)
  if buildInfo.hasKey("compile"):
    echo "📦 Compiling..."
    for entry in buildInfo["compile"]:
      var cmd = entry[1].getStr()
      cmd = cmd.replace("gcc ", "zig cc -target " & zig_target & " ")
      cmd = cmd.replace("clang ", "zig cc -target " & zig_target & " ")
      exec(cmd)
  
  # Step 4: Link (.o -> executable)
  if buildInfo.hasKey("linkcmd"):
    echo "🔗 Linking..."
    var cmd = buildInfo["linkcmd"].getStr()
    cmd = cmd.replace("gcc ", "zig cc -target " & zig_target & " ")
    cmd = cmd.replace("clang ", "zig cc -target " & zig_target & " ")
    
    # macOS Framework handling
    if os_name == "macosx" and "-framework Security" in cmd:
      # SDKパスを取得
      let sdkResult = gorgeEx("xcrun --show-sdk-path 2>/dev/null")
      if sdkResult.exitCode == 0 and sdkResult.output.len > 0:
        let sdkPath = sdkResult.output.strip()
        echo "📁 SDK path: ", sdkPath
        # Replace Framework with .tbd file
        cmd = cmd.replace("-framework Security",
          sdkPath & "/System/Library/Frameworks/Security.framework/Versions/Current/Security.tbd")

    # Change output path
    let parts = cmd.split(" ")
    var newParts: seq[string] = @[]
    var i = 0
    while i < parts.len:
      if parts[i] == "-o" and i + 1 < parts.len:
        i += 2  # Skip -o and next argument
      else:
        newParts.add(parts[i])
        i += 1
    newParts.add("-o")
    newParts.add(outputPath)
    
    try:
      exec(newParts.join(" "))
      echo "✅ Done: ", outputPath
    except:
      echo "⚠️  Failed: ", outputPath, " (Framework or linking error - continuing...)"

# Main targets
task linux_x64, "Build for Linux x86_64":
  buildWithZig("linux_x64", "linux", "amd64", "x86_64-linux-gnu")

task linux_arm64, "Build for Linux ARM64":
  buildWithZig("linux_arm64", "linux", "arm64", "aarch64-linux-gnu")

task macos_x64, "Build for macOS x86_64":
  buildWithZig("macos_x64", "macosx", "amd64", "x86_64-macos-none")

task macos_arm64, "Build for macOS ARM64":
  buildWithZig("macos_arm64", "macosx", "arm64", "aarch64-macos-none")

task windows_x64, "Build for Windows x86_64":
  buildWithZig("windows_x64", "windows", "amd64", "x86_64-windows-gnu", "-d:mingw")

task windows_arm64, "Build for Windows ARM64":
  buildWithZig("windows_arm64", "windows", "arm64", "aarch64-windows-gnu", "-d:mingw")

# musl versions
task linux_x64_musl, "Build for Linux x86_64 (musl)":
  buildWithZig("linux_x64_musl", "linux", "amd64", "x86_64-linux-musl")

task linux_arm64_musl, "Build for Linux ARM64 (musl)":
  buildWithZig("linux_arm64_musl", "linux", "arm64", "aarch64-linux-musl")

# Build all targets
task build_all, "Build for all targets":
  buildWithZig("linux_x64", "linux", "amd64", "x86_64-linux-gnu")
  buildWithZig("linux_arm64", "linux", "arm64", "aarch64-linux-gnu")
  buildWithZig("linux_x64_musl", "linux", "amd64", "x86_64-linux-musl")
  buildWithZig("linux_arm64_musl", "linux", "arm64", "aarch64-linux-musl")
  buildWithZig("macos_x64", "macosx", "amd64", "x86_64-macos-none")
  buildWithZig("macos_arm64", "macosx", "arm64", "aarch64-macos-none")
  buildWithZig("windows_x64", "windows", "amd64", "x86_64-windows-gnu", "-d:mingw")
  buildWithZig("windows_arm64", "windows", "arm64", "aarch64-windows-gnu", "-d:mingw")